Facebook for Haskell
====================
This is a library for working Facebook in Haskell.
Although it has served gallantly in production, it was created before the Graph API came out, and so it uses an older API.

A sample use-case should serve to make it clear how it is used:

```haskell
module FBLine where

import Facebook
import JSON
import System.Environment
import Util

instance ParsedResp JSONValue where
    parseResp ""      = return JNull
    parseResp d@(x:_) = if or [x == y | y <- "{["] then toJSON d else
        parseResp ("[" ++ d ++ "]")
    
perms :: String
perms = "read_stream,publish_stream,offline_access,status_update"

main :: IO ()
main = do
    apiKey <- getEnv "FBAPIKEY" `catch` (\_ -> do
        putStrLn "Facebook API Key?"
        getLine)
    apiSec <- getEnv "FBAPISEC" `catch` (\_ -> do
        putStrLn "Facebook API Secret?"
        getLine)
    (tk, lu) <- createToken apiKey apiSec [("req_perms", perms)]
    putStrLn ("Visit this URL, and then press Enter:")
    putStrLn lu
    putStrLn ""
    getLine
    desktopSession apiKey apiSec tk generator FBJSON []

generator :: Generator (Success JSONValue)
generator mort fb = do
    putStrLn "FB Status?"
    stt <- statusSet fb =<< getLine
    putStrLn (show stt)
    return stt
```

That program, when it is initialised, fetches the API key and secret, and then takes a line of text on standard input, and posts it to Facebook as a status update.

The `statusSet` action is a specialisation of the `execute` action, which has the signature:

```haskell
execute :: (ParsedResp p, Monad m) => Facebook -> String -> [(String, String)]
    -> IO (m p)
```

And `statusSet` itself is defined thus, showing how direct the invocation of API functions is, once the app has been authenticated as shown above:

```haskell
statusSet :: (ParsedResp p, Monad m) => Facebook -> String -> IO (m p)
statusSet fb stt = execute fb "Status.set" [("status", stt)]
```

The `createToken` action, which basically starts everything, is of the signature:

```haskell
createToken :: APIKey -> APISecret -> [(String, String)] -> IO (FBToken, LoginURL)
```

Both `APIKey` and `APISecret` are aliases for `String`. The list of pairs that follows is the options for permissions and so on.

Your application must has an instance of `ParseResp`, which is going to have to be one of an XML parser and a JSON parser. In the example above, a JSON parser was used.
